// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bot

import (
	"context"
	"github.com/mezk/tg-reminder/internal/pkg/domain"
	"sync"
	"time"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			DelayReminderFunc: func(ctx context.Context, id int64, remindAt time.Time) error {
//				panic("mock out the DelayReminder method")
//			},
//			GetBotStateFunc: func(ctx context.Context, userID int64) (domain.BotState, error) {
//				panic("mock out the GetBotState method")
//			},
//			GetMyRemindersFunc: func(ctx context.Context, userID int64, chatID int64) ([]domain.Reminder, error) {
//				panic("mock out the GetMyReminders method")
//			},
//			GetReminderByIDFunc: func(ctx context.Context, id int64) (domain.Reminder, error) {
//				panic("mock out the GetReminderByID method")
//			},
//			RemoveReminderFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the RemoveReminder method")
//			},
//			SaveBotStateFunc: func(ctx context.Context, state domain.BotState) error {
//				panic("mock out the SaveBotState method")
//			},
//			SaveReminderFunc: func(ctx context.Context, reminder domain.Reminder) (int64, error) {
//				panic("mock out the SaveReminder method")
//			},
//			SaveUserFunc: func(ctx context.Context, user domain.User) error {
//				panic("mock out the SaveUser method")
//			},
//			SetReminderStatusFunc: func(ctx context.Context, id int64, status domain.ReminderStatus) error {
//				panic("mock out the SetReminderStatus method")
//			},
//			SetUserStatusFunc: func(ctx context.Context, id int64, inactive domain.UserStatus) error {
//				panic("mock out the SetUserStatus method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// DelayReminderFunc mocks the DelayReminder method.
	DelayReminderFunc func(ctx context.Context, id int64, remindAt time.Time) error

	// GetBotStateFunc mocks the GetBotState method.
	GetBotStateFunc func(ctx context.Context, userID int64) (domain.BotState, error)

	// GetMyRemindersFunc mocks the GetMyReminders method.
	GetMyRemindersFunc func(ctx context.Context, userID int64, chatID int64) ([]domain.Reminder, error)

	// GetReminderByIDFunc mocks the GetReminderByID method.
	GetReminderByIDFunc func(ctx context.Context, id int64) (domain.Reminder, error)

	// RemoveReminderFunc mocks the RemoveReminder method.
	RemoveReminderFunc func(ctx context.Context, id int64) error

	// SaveBotStateFunc mocks the SaveBotState method.
	SaveBotStateFunc func(ctx context.Context, state domain.BotState) error

	// SaveReminderFunc mocks the SaveReminder method.
	SaveReminderFunc func(ctx context.Context, reminder domain.Reminder) (int64, error)

	// SaveUserFunc mocks the SaveUser method.
	SaveUserFunc func(ctx context.Context, user domain.User) error

	// SetReminderStatusFunc mocks the SetReminderStatus method.
	SetReminderStatusFunc func(ctx context.Context, id int64, status domain.ReminderStatus) error

	// SetUserStatusFunc mocks the SetUserStatus method.
	SetUserStatusFunc func(ctx context.Context, id int64, inactive domain.UserStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// DelayReminder holds details about calls to the DelayReminder method.
		DelayReminder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// RemindAt is the remindAt argument value.
			RemindAt time.Time
		}
		// GetBotState holds details about calls to the GetBotState method.
		GetBotState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
		// GetMyReminders holds details about calls to the GetMyReminders method.
		GetMyReminders []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// ChatID is the chatID argument value.
			ChatID int64
		}
		// GetReminderByID holds details about calls to the GetReminderByID method.
		GetReminderByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// RemoveReminder holds details about calls to the RemoveReminder method.
		RemoveReminder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// SaveBotState holds details about calls to the SaveBotState method.
		SaveBotState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State domain.BotState
		}
		// SaveReminder holds details about calls to the SaveReminder method.
		SaveReminder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reminder is the reminder argument value.
			Reminder domain.Reminder
		}
		// SaveUser holds details about calls to the SaveUser method.
		SaveUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User domain.User
		}
		// SetReminderStatus holds details about calls to the SetReminderStatus method.
		SetReminderStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Status is the status argument value.
			Status domain.ReminderStatus
		}
		// SetUserStatus holds details about calls to the SetUserStatus method.
		SetUserStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Inactive is the inactive argument value.
			Inactive domain.UserStatus
		}
	}
	lockDelayReminder     sync.RWMutex
	lockGetBotState       sync.RWMutex
	lockGetMyReminders    sync.RWMutex
	lockGetReminderByID   sync.RWMutex
	lockRemoveReminder    sync.RWMutex
	lockSaveBotState      sync.RWMutex
	lockSaveReminder      sync.RWMutex
	lockSaveUser          sync.RWMutex
	lockSetReminderStatus sync.RWMutex
	lockSetUserStatus     sync.RWMutex
}

// DelayReminder calls DelayReminderFunc.
func (mock *StorageMock) DelayReminder(ctx context.Context, id int64, remindAt time.Time) error {
	if mock.DelayReminderFunc == nil {
		panic("StorageMock.DelayReminderFunc: method is nil but Storage.DelayReminder was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ID       int64
		RemindAt time.Time
	}{
		Ctx:      ctx,
		ID:       id,
		RemindAt: remindAt,
	}
	mock.lockDelayReminder.Lock()
	mock.calls.DelayReminder = append(mock.calls.DelayReminder, callInfo)
	mock.lockDelayReminder.Unlock()
	return mock.DelayReminderFunc(ctx, id, remindAt)
}

// DelayReminderCalls gets all the calls that were made to DelayReminder.
// Check the length with:
//
//	len(mockedStorage.DelayReminderCalls())
func (mock *StorageMock) DelayReminderCalls() []struct {
	Ctx      context.Context
	ID       int64
	RemindAt time.Time
} {
	var calls []struct {
		Ctx      context.Context
		ID       int64
		RemindAt time.Time
	}
	mock.lockDelayReminder.RLock()
	calls = mock.calls.DelayReminder
	mock.lockDelayReminder.RUnlock()
	return calls
}

// ResetDelayReminderCalls reset all the calls that were made to DelayReminder.
func (mock *StorageMock) ResetDelayReminderCalls() {
	mock.lockDelayReminder.Lock()
	mock.calls.DelayReminder = nil
	mock.lockDelayReminder.Unlock()
}

// GetBotState calls GetBotStateFunc.
func (mock *StorageMock) GetBotState(ctx context.Context, userID int64) (domain.BotState, error) {
	if mock.GetBotStateFunc == nil {
		panic("StorageMock.GetBotStateFunc: method is nil but Storage.GetBotState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetBotState.Lock()
	mock.calls.GetBotState = append(mock.calls.GetBotState, callInfo)
	mock.lockGetBotState.Unlock()
	return mock.GetBotStateFunc(ctx, userID)
}

// GetBotStateCalls gets all the calls that were made to GetBotState.
// Check the length with:
//
//	len(mockedStorage.GetBotStateCalls())
func (mock *StorageMock) GetBotStateCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockGetBotState.RLock()
	calls = mock.calls.GetBotState
	mock.lockGetBotState.RUnlock()
	return calls
}

// ResetGetBotStateCalls reset all the calls that were made to GetBotState.
func (mock *StorageMock) ResetGetBotStateCalls() {
	mock.lockGetBotState.Lock()
	mock.calls.GetBotState = nil
	mock.lockGetBotState.Unlock()
}

// GetMyReminders calls GetMyRemindersFunc.
func (mock *StorageMock) GetMyReminders(ctx context.Context, userID int64, chatID int64) ([]domain.Reminder, error) {
	if mock.GetMyRemindersFunc == nil {
		panic("StorageMock.GetMyRemindersFunc: method is nil but Storage.GetMyReminders was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
		ChatID int64
	}{
		Ctx:    ctx,
		UserID: userID,
		ChatID: chatID,
	}
	mock.lockGetMyReminders.Lock()
	mock.calls.GetMyReminders = append(mock.calls.GetMyReminders, callInfo)
	mock.lockGetMyReminders.Unlock()
	return mock.GetMyRemindersFunc(ctx, userID, chatID)
}

// GetMyRemindersCalls gets all the calls that were made to GetMyReminders.
// Check the length with:
//
//	len(mockedStorage.GetMyRemindersCalls())
func (mock *StorageMock) GetMyRemindersCalls() []struct {
	Ctx    context.Context
	UserID int64
	ChatID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
		ChatID int64
	}
	mock.lockGetMyReminders.RLock()
	calls = mock.calls.GetMyReminders
	mock.lockGetMyReminders.RUnlock()
	return calls
}

// ResetGetMyRemindersCalls reset all the calls that were made to GetMyReminders.
func (mock *StorageMock) ResetGetMyRemindersCalls() {
	mock.lockGetMyReminders.Lock()
	mock.calls.GetMyReminders = nil
	mock.lockGetMyReminders.Unlock()
}

// GetReminderByID calls GetReminderByIDFunc.
func (mock *StorageMock) GetReminderByID(ctx context.Context, id int64) (domain.Reminder, error) {
	if mock.GetReminderByIDFunc == nil {
		panic("StorageMock.GetReminderByIDFunc: method is nil but Storage.GetReminderByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetReminderByID.Lock()
	mock.calls.GetReminderByID = append(mock.calls.GetReminderByID, callInfo)
	mock.lockGetReminderByID.Unlock()
	return mock.GetReminderByIDFunc(ctx, id)
}

// GetReminderByIDCalls gets all the calls that were made to GetReminderByID.
// Check the length with:
//
//	len(mockedStorage.GetReminderByIDCalls())
func (mock *StorageMock) GetReminderByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetReminderByID.RLock()
	calls = mock.calls.GetReminderByID
	mock.lockGetReminderByID.RUnlock()
	return calls
}

// ResetGetReminderByIDCalls reset all the calls that were made to GetReminderByID.
func (mock *StorageMock) ResetGetReminderByIDCalls() {
	mock.lockGetReminderByID.Lock()
	mock.calls.GetReminderByID = nil
	mock.lockGetReminderByID.Unlock()
}

// RemoveReminder calls RemoveReminderFunc.
func (mock *StorageMock) RemoveReminder(ctx context.Context, id int64) error {
	if mock.RemoveReminderFunc == nil {
		panic("StorageMock.RemoveReminderFunc: method is nil but Storage.RemoveReminder was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemoveReminder.Lock()
	mock.calls.RemoveReminder = append(mock.calls.RemoveReminder, callInfo)
	mock.lockRemoveReminder.Unlock()
	return mock.RemoveReminderFunc(ctx, id)
}

// RemoveReminderCalls gets all the calls that were made to RemoveReminder.
// Check the length with:
//
//	len(mockedStorage.RemoveReminderCalls())
func (mock *StorageMock) RemoveReminderCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockRemoveReminder.RLock()
	calls = mock.calls.RemoveReminder
	mock.lockRemoveReminder.RUnlock()
	return calls
}

// ResetRemoveReminderCalls reset all the calls that were made to RemoveReminder.
func (mock *StorageMock) ResetRemoveReminderCalls() {
	mock.lockRemoveReminder.Lock()
	mock.calls.RemoveReminder = nil
	mock.lockRemoveReminder.Unlock()
}

// SaveBotState calls SaveBotStateFunc.
func (mock *StorageMock) SaveBotState(ctx context.Context, state domain.BotState) error {
	if mock.SaveBotStateFunc == nil {
		panic("StorageMock.SaveBotStateFunc: method is nil but Storage.SaveBotState was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State domain.BotState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockSaveBotState.Lock()
	mock.calls.SaveBotState = append(mock.calls.SaveBotState, callInfo)
	mock.lockSaveBotState.Unlock()
	return mock.SaveBotStateFunc(ctx, state)
}

// SaveBotStateCalls gets all the calls that were made to SaveBotState.
// Check the length with:
//
//	len(mockedStorage.SaveBotStateCalls())
func (mock *StorageMock) SaveBotStateCalls() []struct {
	Ctx   context.Context
	State domain.BotState
} {
	var calls []struct {
		Ctx   context.Context
		State domain.BotState
	}
	mock.lockSaveBotState.RLock()
	calls = mock.calls.SaveBotState
	mock.lockSaveBotState.RUnlock()
	return calls
}

// ResetSaveBotStateCalls reset all the calls that were made to SaveBotState.
func (mock *StorageMock) ResetSaveBotStateCalls() {
	mock.lockSaveBotState.Lock()
	mock.calls.SaveBotState = nil
	mock.lockSaveBotState.Unlock()
}

// SaveReminder calls SaveReminderFunc.
func (mock *StorageMock) SaveReminder(ctx context.Context, reminder domain.Reminder) (int64, error) {
	if mock.SaveReminderFunc == nil {
		panic("StorageMock.SaveReminderFunc: method is nil but Storage.SaveReminder was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Reminder domain.Reminder
	}{
		Ctx:      ctx,
		Reminder: reminder,
	}
	mock.lockSaveReminder.Lock()
	mock.calls.SaveReminder = append(mock.calls.SaveReminder, callInfo)
	mock.lockSaveReminder.Unlock()
	return mock.SaveReminderFunc(ctx, reminder)
}

// SaveReminderCalls gets all the calls that were made to SaveReminder.
// Check the length with:
//
//	len(mockedStorage.SaveReminderCalls())
func (mock *StorageMock) SaveReminderCalls() []struct {
	Ctx      context.Context
	Reminder domain.Reminder
} {
	var calls []struct {
		Ctx      context.Context
		Reminder domain.Reminder
	}
	mock.lockSaveReminder.RLock()
	calls = mock.calls.SaveReminder
	mock.lockSaveReminder.RUnlock()
	return calls
}

// ResetSaveReminderCalls reset all the calls that were made to SaveReminder.
func (mock *StorageMock) ResetSaveReminderCalls() {
	mock.lockSaveReminder.Lock()
	mock.calls.SaveReminder = nil
	mock.lockSaveReminder.Unlock()
}

// SaveUser calls SaveUserFunc.
func (mock *StorageMock) SaveUser(ctx context.Context, user domain.User) error {
	if mock.SaveUserFunc == nil {
		panic("StorageMock.SaveUserFunc: method is nil but Storage.SaveUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User domain.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockSaveUser.Lock()
	mock.calls.SaveUser = append(mock.calls.SaveUser, callInfo)
	mock.lockSaveUser.Unlock()
	return mock.SaveUserFunc(ctx, user)
}

// SaveUserCalls gets all the calls that were made to SaveUser.
// Check the length with:
//
//	len(mockedStorage.SaveUserCalls())
func (mock *StorageMock) SaveUserCalls() []struct {
	Ctx  context.Context
	User domain.User
} {
	var calls []struct {
		Ctx  context.Context
		User domain.User
	}
	mock.lockSaveUser.RLock()
	calls = mock.calls.SaveUser
	mock.lockSaveUser.RUnlock()
	return calls
}

// ResetSaveUserCalls reset all the calls that were made to SaveUser.
func (mock *StorageMock) ResetSaveUserCalls() {
	mock.lockSaveUser.Lock()
	mock.calls.SaveUser = nil
	mock.lockSaveUser.Unlock()
}

// SetReminderStatus calls SetReminderStatusFunc.
func (mock *StorageMock) SetReminderStatus(ctx context.Context, id int64, status domain.ReminderStatus) error {
	if mock.SetReminderStatusFunc == nil {
		panic("StorageMock.SetReminderStatusFunc: method is nil but Storage.SetReminderStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     int64
		Status domain.ReminderStatus
	}{
		Ctx:    ctx,
		ID:     id,
		Status: status,
	}
	mock.lockSetReminderStatus.Lock()
	mock.calls.SetReminderStatus = append(mock.calls.SetReminderStatus, callInfo)
	mock.lockSetReminderStatus.Unlock()
	return mock.SetReminderStatusFunc(ctx, id, status)
}

// SetReminderStatusCalls gets all the calls that were made to SetReminderStatus.
// Check the length with:
//
//	len(mockedStorage.SetReminderStatusCalls())
func (mock *StorageMock) SetReminderStatusCalls() []struct {
	Ctx    context.Context
	ID     int64
	Status domain.ReminderStatus
} {
	var calls []struct {
		Ctx    context.Context
		ID     int64
		Status domain.ReminderStatus
	}
	mock.lockSetReminderStatus.RLock()
	calls = mock.calls.SetReminderStatus
	mock.lockSetReminderStatus.RUnlock()
	return calls
}

// ResetSetReminderStatusCalls reset all the calls that were made to SetReminderStatus.
func (mock *StorageMock) ResetSetReminderStatusCalls() {
	mock.lockSetReminderStatus.Lock()
	mock.calls.SetReminderStatus = nil
	mock.lockSetReminderStatus.Unlock()
}

// SetUserStatus calls SetUserStatusFunc.
func (mock *StorageMock) SetUserStatus(ctx context.Context, id int64, inactive domain.UserStatus) error {
	if mock.SetUserStatusFunc == nil {
		panic("StorageMock.SetUserStatusFunc: method is nil but Storage.SetUserStatus was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ID       int64
		Inactive domain.UserStatus
	}{
		Ctx:      ctx,
		ID:       id,
		Inactive: inactive,
	}
	mock.lockSetUserStatus.Lock()
	mock.calls.SetUserStatus = append(mock.calls.SetUserStatus, callInfo)
	mock.lockSetUserStatus.Unlock()
	return mock.SetUserStatusFunc(ctx, id, inactive)
}

// SetUserStatusCalls gets all the calls that were made to SetUserStatus.
// Check the length with:
//
//	len(mockedStorage.SetUserStatusCalls())
func (mock *StorageMock) SetUserStatusCalls() []struct {
	Ctx      context.Context
	ID       int64
	Inactive domain.UserStatus
} {
	var calls []struct {
		Ctx      context.Context
		ID       int64
		Inactive domain.UserStatus
	}
	mock.lockSetUserStatus.RLock()
	calls = mock.calls.SetUserStatus
	mock.lockSetUserStatus.RUnlock()
	return calls
}

// ResetSetUserStatusCalls reset all the calls that were made to SetUserStatus.
func (mock *StorageMock) ResetSetUserStatusCalls() {
	mock.lockSetUserStatus.Lock()
	mock.calls.SetUserStatus = nil
	mock.lockSetUserStatus.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *StorageMock) ResetCalls() {
	mock.lockDelayReminder.Lock()
	mock.calls.DelayReminder = nil
	mock.lockDelayReminder.Unlock()

	mock.lockGetBotState.Lock()
	mock.calls.GetBotState = nil
	mock.lockGetBotState.Unlock()

	mock.lockGetMyReminders.Lock()
	mock.calls.GetMyReminders = nil
	mock.lockGetMyReminders.Unlock()

	mock.lockGetReminderByID.Lock()
	mock.calls.GetReminderByID = nil
	mock.lockGetReminderByID.Unlock()

	mock.lockRemoveReminder.Lock()
	mock.calls.RemoveReminder = nil
	mock.lockRemoveReminder.Unlock()

	mock.lockSaveBotState.Lock()
	mock.calls.SaveBotState = nil
	mock.lockSaveBotState.Unlock()

	mock.lockSaveReminder.Lock()
	mock.calls.SaveReminder = nil
	mock.lockSaveReminder.Unlock()

	mock.lockSaveUser.Lock()
	mock.calls.SaveUser = nil
	mock.lockSaveUser.Unlock()

	mock.lockSetReminderStatus.Lock()
	mock.calls.SetReminderStatus = nil
	mock.lockSetReminderStatus.Unlock()

	mock.lockSetUserStatus.Lock()
	mock.calls.SetUserStatus = nil
	mock.lockSetUserStatus.Unlock()
}
