package v2

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	log "github.com/go-pkgz/lgr"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/mezk/tg-reminder/internal/pkg/domain"
	"github.com/mezk/tg-reminder/internal/pkg/paginator"
)

const commandMyReminders = "/my_reminders"

func (tb *tgBot) myRemindersHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := getUserID(update)

	reminders, err := tb.store.GetMyReminders(ctx, userID, userID)
	if err != nil {
		log.Printf("[ERROR] can't get user %d reminders: %v", userID, err)
		return
	}

	if len(reminders) == 0 {
		tb.sendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   fmt.Sprintf("<b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_reminder."),
		})
	}

	const doubleNewLine = "\n\n"

	data := make([]string, 0, len(reminders))
	for _, r := range reminders {
		data = append(data, formatReminder(r, timeNowUTC()))
	}

	p := paginator.New(tb.api, data,
		paginator.PerPage(3),
		paginator.Separator(doubleNewLine),
		paginator.WithCloseButton("–ó–∞–∫—Ä—ã—Ç—å"),
		paginator.WithEditButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", tb.onEditReminderButton),
		paginator.WithRemoveButton("–£–¥–∞–ª–∏—Ç—å", tb.onRemoveReminderButton),
		paginator.WithoutEmptyButtons(),
	)

	if _, err = p.Show(ctx, b, userID); err != nil {
		log.Printf("[ERROR] can't show user %d reminders: %v", userID, err)
	}
}

func (tb *tgBot) onEditReminderButton(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := getUserID(update)

	tb.sendMessage(ctx, &bot.SendMessageParams{
		ChatID: userID,
		Text:   "–í–≤–µ–¥–∏—Ç–µ üÜî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
	})

	// tb.state.Transition(userID, stateEditReminderAskID)
}

func (tb *tgBot) onRemoveReminderButton(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := getUserID(update)

	tb.sendMessage(ctx, &bot.SendMessageParams{
		ChatID: userID,
		Text:   "–í–≤–µ–¥–∏—Ç–µ üÜî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
	})

	// tb.state.Transition(userID, stateRemoveReminderAskID)
}

func formatReminder(r domain.Reminder, now time.Time) string {
	var (
		remindAtMSK         = domain.MoscowTime(r.RemindAt)
		nYear, nMonth, nDay = domain.MoscowTime(now).Date()
		rYear, rMonth, rDay = remindAtMSK.Date()
		timeOnly            = remindAtMSK.Format(layoutTimeOnly)
	)

	var sb strings.Builder
	sb.WriteString("‚úÖ <b>")
	sb.WriteString(r.Text)
	sb.WriteString("‚ùó</b>")

	if nYear == rYear && nMonth == rMonth && nDay == rDay { // today
		sb.WriteString("\n‚è∞ –°–µ–≥–æ–¥–Ω—è ")
		sb.WriteString(timeOnly)
	} else {
		sb.WriteString("\n‚è∞ ")
		sb.WriteString(strconv.Itoa(remindAtMSK.Day()))
		sb.WriteRune(' ')
		sb.WriteString(getRussianMonth(remindAtMSK.Month()))
		sb.WriteRune(' ')
		sb.WriteString(timeOnly)
	}

	sb.WriteString("\nüÜî ")
	sb.WriteString(strconv.FormatInt(r.ID, 10))

	return sb.String()
}

func getRussianMonth(m time.Month) string {
	switch m {
	case time.January:
		return "—è–Ω–≤."
	case time.February:
		return "—Ñ–µ–≤."
	case time.March:
		return "–º–∞—Ä."
	case time.April:
		return "–∞–ø—Ä."
	case time.May:
		return "–º–∞—è"
	case time.June:
		return "–∏—é–Ω."
	case time.July:
		return "–∏—é–ª."
	case time.August:
		return "–∞–≤–≥."
	case time.September:
		return "—Å–µ–Ω—Ç."
	case time.October:
		return "–æ–∫—Ç."
	case time.November:
		return "–Ω–æ—è–±."
	case time.December:
		return "–¥–µ–∫."
	default:
		return ""
	}
}
