// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/mezk/tg-reminder/internal/pkg/domain"
	"sync"
)

// StorageMock is a mock implementation of notifier.Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked notifier.Storage
//		mockedStorage := &StorageMock{
//			GetPendingRemidnersFunc: func(ctx context.Context, limit int64) ([]domain.Reminder, error) {
//				panic("mock out the GetPendingRemidners method")
//			},
//			UpdateReminderFunc: func(ctx context.Context, reminder domain.Reminder) error {
//				panic("mock out the UpdateReminder method")
//			},
//		}
//
//		// use mockedStorage in code that requires notifier.Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// GetPendingRemidnersFunc mocks the GetPendingRemidners method.
	GetPendingRemidnersFunc func(ctx context.Context, limit int64) ([]domain.Reminder, error)

	// UpdateReminderFunc mocks the UpdateReminder method.
	UpdateReminderFunc func(ctx context.Context, reminder domain.Reminder) error

	// calls tracks calls to the methods.
	calls struct {
		// GetPendingRemidners holds details about calls to the GetPendingRemidners method.
		GetPendingRemidners []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int64
		}
		// UpdateReminder holds details about calls to the UpdateReminder method.
		UpdateReminder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reminder is the reminder argument value.
			Reminder domain.Reminder
		}
	}
	lockGetPendingRemidners sync.RWMutex
	lockUpdateReminder      sync.RWMutex
}

// GetPendingRemidners calls GetPendingRemidnersFunc.
func (mock *StorageMock) GetPendingRemidners(ctx context.Context, limit int64) ([]domain.Reminder, error) {
	if mock.GetPendingRemidnersFunc == nil {
		panic("StorageMock.GetPendingRemidnersFunc: method is nil but Storage.GetPendingRemidners was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit int64
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockGetPendingRemidners.Lock()
	mock.calls.GetPendingRemidners = append(mock.calls.GetPendingRemidners, callInfo)
	mock.lockGetPendingRemidners.Unlock()
	return mock.GetPendingRemidnersFunc(ctx, limit)
}

// GetPendingRemidnersCalls gets all the calls that were made to GetPendingRemidners.
// Check the length with:
//
//	len(mockedStorage.GetPendingRemidnersCalls())
func (mock *StorageMock) GetPendingRemidnersCalls() []struct {
	Ctx   context.Context
	Limit int64
} {
	var calls []struct {
		Ctx   context.Context
		Limit int64
	}
	mock.lockGetPendingRemidners.RLock()
	calls = mock.calls.GetPendingRemidners
	mock.lockGetPendingRemidners.RUnlock()
	return calls
}

// ResetGetPendingRemidnersCalls reset all the calls that were made to GetPendingRemidners.
func (mock *StorageMock) ResetGetPendingRemidnersCalls() {
	mock.lockGetPendingRemidners.Lock()
	mock.calls.GetPendingRemidners = nil
	mock.lockGetPendingRemidners.Unlock()
}

// UpdateReminder calls UpdateReminderFunc.
func (mock *StorageMock) UpdateReminder(ctx context.Context, reminder domain.Reminder) error {
	if mock.UpdateReminderFunc == nil {
		panic("StorageMock.UpdateReminderFunc: method is nil but Storage.UpdateReminder was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Reminder domain.Reminder
	}{
		Ctx:      ctx,
		Reminder: reminder,
	}
	mock.lockUpdateReminder.Lock()
	mock.calls.UpdateReminder = append(mock.calls.UpdateReminder, callInfo)
	mock.lockUpdateReminder.Unlock()
	return mock.UpdateReminderFunc(ctx, reminder)
}

// UpdateReminderCalls gets all the calls that were made to UpdateReminder.
// Check the length with:
//
//	len(mockedStorage.UpdateReminderCalls())
func (mock *StorageMock) UpdateReminderCalls() []struct {
	Ctx      context.Context
	Reminder domain.Reminder
} {
	var calls []struct {
		Ctx      context.Context
		Reminder domain.Reminder
	}
	mock.lockUpdateReminder.RLock()
	calls = mock.calls.UpdateReminder
	mock.lockUpdateReminder.RUnlock()
	return calls
}

// ResetUpdateReminderCalls reset all the calls that were made to UpdateReminder.
func (mock *StorageMock) ResetUpdateReminderCalls() {
	mock.lockUpdateReminder.Lock()
	mock.calls.UpdateReminder = nil
	mock.lockUpdateReminder.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *StorageMock) ResetCalls() {
	mock.lockGetPendingRemidners.Lock()
	mock.calls.GetPendingRemidners = nil
	mock.lockGetPendingRemidners.Unlock()

	mock.lockUpdateReminder.Lock()
	mock.calls.UpdateReminder = nil
	mock.lockUpdateReminder.Unlock()
}
