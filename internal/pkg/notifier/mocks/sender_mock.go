// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/mezk/tg-reminder/internal/pkg/sender"
	"sync"
)

// BotResponseSenderMock is a mock implementation of notifier.BotResponseSender.
//
//	func TestSomethingThatUsesBotResponseSender(t *testing.T) {
//
//		// make and configure a mocked notifier.BotResponseSender
//		mockedBotResponseSender := &BotResponseSenderMock{
//			SendBotResponseFunc: func(response sender.BotResponse, opts ...sender.BotResponseOption) error {
//				panic("mock out the SendBotResponse method")
//			},
//		}
//
//		// use mockedBotResponseSender in code that requires notifier.BotResponseSender
//		// and then make assertions.
//
//	}
type BotResponseSenderMock struct {
	// SendBotResponseFunc mocks the SendBotResponse method.
	SendBotResponseFunc func(response sender.BotResponse, opts ...sender.BotResponseOption) error

	// calls tracks calls to the methods.
	calls struct {
		// SendBotResponse holds details about calls to the SendBotResponse method.
		SendBotResponse []struct {
			// Response is the response argument value.
			Response sender.BotResponse
			// Opts is the opts argument value.
			Opts []sender.BotResponseOption
		}
	}
	lockSendBotResponse sync.RWMutex
}

// SendBotResponse calls SendBotResponseFunc.
func (mock *BotResponseSenderMock) SendBotResponse(response sender.BotResponse, opts ...sender.BotResponseOption) error {
	if mock.SendBotResponseFunc == nil {
		panic("BotResponseSenderMock.SendBotResponseFunc: method is nil but BotResponseSender.SendBotResponse was just called")
	}
	callInfo := struct {
		Response sender.BotResponse
		Opts     []sender.BotResponseOption
	}{
		Response: response,
		Opts:     opts,
	}
	mock.lockSendBotResponse.Lock()
	mock.calls.SendBotResponse = append(mock.calls.SendBotResponse, callInfo)
	mock.lockSendBotResponse.Unlock()
	return mock.SendBotResponseFunc(response, opts...)
}

// SendBotResponseCalls gets all the calls that were made to SendBotResponse.
// Check the length with:
//
//	len(mockedBotResponseSender.SendBotResponseCalls())
func (mock *BotResponseSenderMock) SendBotResponseCalls() []struct {
	Response sender.BotResponse
	Opts     []sender.BotResponseOption
} {
	var calls []struct {
		Response sender.BotResponse
		Opts     []sender.BotResponseOption
	}
	mock.lockSendBotResponse.RLock()
	calls = mock.calls.SendBotResponse
	mock.lockSendBotResponse.RUnlock()
	return calls
}

// ResetSendBotResponseCalls reset all the calls that were made to SendBotResponse.
func (mock *BotResponseSenderMock) ResetSendBotResponseCalls() {
	mock.lockSendBotResponse.Lock()
	mock.calls.SendBotResponse = nil
	mock.lockSendBotResponse.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *BotResponseSenderMock) ResetCalls() {
	mock.lockSendBotResponse.Lock()
	mock.calls.SendBotResponse = nil
	mock.lockSendBotResponse.Unlock()
}
